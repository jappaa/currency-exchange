'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.fetchEntity = undefined;var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _effects = require('redux-saga/effects');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _marked = [












fetchEntity].map(_regenerator2.default.mark); /**
                                                 * @param {[object]}    entity     |
                                                                                     {
                                                                                        "FAILURE": "VIDEOS_FAILURE",
                                                                                        "REQUEST": "VIDEOS_REQUEST",
                                                                                        "SUCCESS": "VIDEOS_SUCCESS"
                                                                                     }
                                                                                   | actions
                                                 * @param  {[func]}    apiFn       | function() | fetch api function
                                                 * @return {[func]}    action      | request(), success() or failure()  | watch callback action then return action
                                                 */function fetchEntity(entity, apiFn) {var _ref, response, error;return _regenerator2.default.wrap(function fetchEntity$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (0, _effects.put)(entity.request());case 2:_context.next = 4;return (0, _effects.call)(apiFn);case 4:_ref = _context.sent;response = _ref.response;error = _ref.error;if (!response) {_context.next = 12;break;}_context.next = 10;return (0, _effects.put)(entity.success(response));case 10:_context.next = 14;break;case 12:_context.next = 14;return (0, _effects.put)(entity.failure(error));case 14:case 'end':return _context.stop();}}}, _marked[0], this);}exports.fetchEntity = fetchEntity;